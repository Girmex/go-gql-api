package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"errors"
	"fmt"

	"github.com/Girmex/go-gql-api/graph/model"
	"github.com/Girmex/go-gql-api/middleware"
	"github.com/Girmex/go-gql-api/utils/auth"
	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUserInput) (*model.User, error) {
	hashedPassword, err := auth.HashPassword(input.Password)
	if err != nil {
		return nil, fmt.Errorf("failed to hash password: %w", err)
	}

	user := &model.User{
		ID:       uuid.NewString(),
		Name:     input.Name,
		Email:    input.Email,
		Password: hashedPassword,
	}

	if err := r.DB.Create(user).Error; err != nil {
		return nil, err
	}

	return user, nil
}


func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	var user model.User
	if err := r.DB.Where("email = ?", input.Email).First(&user).Error; err != nil {
		return nil, errors.New("user not found")
	}

	if !auth.CheckPasswordHash(input.Password, user.Password) {
		return nil, errors.New("invalid credentials")
	}

	token, err := auth.GenerateToken(user.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to generate token: %w", err)
	}

	return &model.AuthPayload{
		Token: token,
		User:  &user,
	}, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPostInput) (*model.Post, error) {
	userID, ok := middleware.GetUserID(ctx)
	if !ok {
		return nil, fmt.Errorf("user ID not found in context")
	}
	post := &model.Post{
		ID:       uuid.NewString(),
		Title:    input.Title,
		Content:  input.Content,
		AuthorID: userID,
	}

	// Save the post
	if err := r.DB.Create(post).Error; err != nil {
		return nil, fmt.Errorf("failed to create post: %w", err)
	}

	// Load Author relation (optional, useful if you want to return full author data)
	if err := r.DB.Preload("Author").First(post, "id = ?", post.ID).Error; err != nil {
		return nil, fmt.Errorf("failed to load author: %w", err)
	}

	return post, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewCommentInput) (*model.Comment, error) {
	comment := &model.Comment{
		ID:      uuid.NewString(), // import "github.com/google/uuid"
		Content: input.Content,
		UserID:  input.AuthorID,
		PostID:  input.PostID,
	}

	if err := r.DB.Create(comment).Error; err != nil {
		return nil, err
	}

	// Load relations
	if err := r.DB.Preload("User").Preload("Post").First(comment, "id = ?", comment.ID).Error; err != nil {
		return nil, err
	}

	return comment, nil
}

// Login is the resolver for the login field.

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	if err := r.DB.Preload("Posts").Find(&users).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch users: %w", err)
	}
	return users, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	var posts []*model.Post
	err := r.DB.
		Preload("Author").
		Preload("Comments.User"). // preload User inside Comments
		Preload("Comments.Post"). // optional, if you want to preload Post in Comments too
		Find(&posts).Error

	if err != nil {
		return nil, fmt.Errorf("failed to fetch posts: %w", err)
	}
	return posts, nil
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context) ([]*model.Comment, error) {
	var comments []*model.Comment
	if err := r.DB.Preload("User").Preload("Post").Find(&comments).Error; err != nil {
		return nil, err
	}
	return comments, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
